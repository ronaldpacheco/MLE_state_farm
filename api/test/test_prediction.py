import unittest
import json
from flask import Flask
from endpoints.prediction import prediction_api

app = Flask(__name__)
app.register_blueprint(prediction_api)

# Create local tester
tester = app.test_client()


class ClassificationTests(unittest.TestCase):

    def __init__(self, *args, **kwargs):
        super(ClassificationTests, self).__init__(*args, **kwargs)

    def test_predict_single(self):
        response = tester.post(
            '/predict',
            data=json.dumps(

                 [{"x0": "0.042317", "x1": "-3.3447210000000003", "x2": "4.635124212161472", "x3": "-0.5983959993003629", "x4": "-0.6477715045570444", "x5": "monday", "x6": "0.184902", "x7": "46.690015", "x8": "3.034132", "x9": "0.364704", "x10": "14.260732999999998", "x11": "-1.559332", "x12": "$5,547.78", "x13": "0.520324", "x14": "31.212255", "x15": "4.891671", "x16": "0.357763", "x17": "14.766366", "x18": "-17.467243", "x19": "0.22462800000000002", "x20": "0.096752", "x21": "1.305564", "x22": "0.353632", "x23": "3.9090279999999997", "x24": "-91.273052", "x25": "1.396952", "x26": "4.401593", "x27": "0.443086", "x28": "14.048786999999999", "x29": "-0.932243", "x30": "5.255472", "x31": "germany", "x32": "0.54199153", "x33": "2.98948039", "x34": "-1.78334189", "x35": "0.80127315", "x36": "-2.60231221", "x37": "3.39682926", "x38": "-1.22322646", "x39": "-2.20977636", "x40": "-68.69", "x41": "522.25", "x42": "-428.69", "x43": "381.37", "x44": "0.0197503", "x45": "0.75116479", "x46": "0.8630479007977094", "x47": "-1.0383166613479036", "x48": "-0.27261876352216863", "x49": "-0.3430207259042951", "x50": "0.31090086655652394", "x51": "-0.7978419740300581", "x52": "-2.0390175152938923", "x53": "0.87182889", "x54": "0.14373012", "x55": "-1.15212514", "x56": "-2.1703139704", "x57": "-0.2678429620280057", "x58": "0.21211063295318527", "x59": "1.6926559406621045", "x60": "-0.9522767913493432", "x61": "-0.8625864974123282", "x62": "0.07484871579558282", "x63": "36.29%", "x64": "3.47125327", "x65": "-3.16656509", "x66": "0.65446814", "x67": "14.60067029", "x68": "-20.57521013", "x69": "0.71083785", "x70": "0.16983767", "x71": "0.55082127", "x72": "0.62814576", "x73": "3.38608078", "x74": "-112.45263714", "x75": "1.48370808", "x76": "1.77035368", "x77": "0.75702363", "x78": "14.75731742", "x79": "-0.62550355", "x80": "nan", "x81": "October", "x82": "Female", "x83": "-0.7116680715420765", "x84": "-0.26535598920105635", "x85": "0.5175495906776872", "x86": "-1.0881027091519957", "x87": "-1.8188638198005096", "x88": "-1.3584469526619427", "x89": "-0.6549951949654567", "x90": "-0.493304226235515", "x91": "0.37385300000000005", "x92": "0.94143481", "x93": "3.54679834", "x94": "-99.85748819999999", "x95": "0.403926", "x96": "1.65378726", "x97": "0.00771459", "x98": "-32.02164582", "x99": "-60.3127828"}]),
            content_type='application/json'
        )

        data = response.get_data(as_text=True)
        print("Single Call: "+str(data))
        self.assertEqual(response.status_code, 200)
        self.assertIsNotNone(data)

    def test_predict_triple(self):
        response = tester.post(
            '/predict',
            data=json.dumps([{"x0": "0.042317", "x1": "-3.3447210000000003", "x2": "4.635124212161472", "x3": "-0.5983959993003629", "x4": "-0.6477715045570444", "x5": "monday", "x6": "0.184902", "x7": "46.690015", "x8": "3.034132", "x9": "0.364704", "x10": "14.260732999999998", "x11": "-1.559332", "x12": "$5,547.78", "x13": "0.520324", "x14": "31.212255", "x15": "4.891671", "x16": "0.357763", "x17": "14.766366", "x18": "-17.467243", "x19": "0.22462800000000002", "x20": "0.096752", "x21": "1.305564", "x22": "0.353632", "x23": "3.9090279999999997", "x24": "-91.273052", "x25": "1.396952", "x26": "4.401593", "x27": "0.443086", "x28": "14.048786999999999", "x29": "-0.932243", "x30": "5.255472", "x31": "germany", "x32": "0.54199153", "x33": "2.98948039", "x34": "-1.78334189", "x35": "0.80127315", "x36": "-2.60231221", "x37": "3.39682926", "x38": "-1.22322646", "x39": "-2.20977636", "x40": "-68.69", "x41": "522.25", "x42": "-428.69", "x43": "381.37", "x44": "0.0197503", "x45": "0.75116479", "x46": "0.8630479007977094", "x47": "-1.0383166613479036", "x48": "-0.27261876352216863", "x49": "-0.3430207259042951", "x50": "0.31090086655652394", "x51": "-0.7978419740300581", "x52": "-2.0390175152938923", "x53": "0.87182889", "x54": "0.14373012", "x55": "-1.15212514", "x56": "-2.1703139704", "x57": "-0.2678429620280057", "x58": "0.21211063295318527", "x59": "1.6926559406621045", "x60": "-0.9522767913493432", "x61": "-0.8625864974123282", "x62": "0.07484871579558282", "x63": "36.29%", "x64": "3.47125327", "x65": "-3.16656509", "x66": "0.65446814", "x67": "14.60067029", "x68": "-20.57521013", "x69": "0.71083785", "x70": "0.16983767", "x71": "0.55082127", "x72": "0.62814576", "x73": "3.38608078", "x74": "-112.45263714", "x75": "1.48370808", "x76": "1.77035368", "x77": "0.75702363", "x78": "14.75731742", "x79": "-0.62550355", "x80": "nan", "x81": "October", "x82": "Female", "x83": "-0.7116680715420765", "x84": "-0.26535598920105635", "x85": "0.5175495906776872", "x86": "-1.0881027091519957", "x87": "-1.8188638198005096", "x88": "-1.3584469526619427", "x89": "-0.6549951949654567", "x90": "-0.493304226235515", "x91": "0.37385300000000005", "x92": "0.94143481", "x93": "3.54679834", "x94": "-99.85748819999999", "x95": "0.403926", "x96": "1.65378726", "x97": "0.00771459", "x98": "-32.02164582", "x99": "-60.3127828"}, {"x0": "-1.03316", "x1": "-0.34014", "x2": "5.871823267093173", "x3": "nan", "x4": "0.12213313902703375", "x5": "tuesday", "x6": "0.9977729999999999", "x7": "51.581410999999996", "x8": "1.7092189999999998", "x9": "0.8440790000000001", "x10": "14.105232999999998", "x11": "-2.5433", "x12": "$-5,483.24", "x13": "0.28742", "x14": "35.743491999999996", "x15": "4.415237", "x16": "0.11043499999999999", "x17": "14.944932999999999", "x18": "-18.755392", "x19": "0.075041", "x20": "0.214917", "x21": "-4.123163", "x22": "0.7276600000000001", "x23": "3.006255", "x24": "-113.387174", "x25": "1.2295280000000002", "x26": "3.748232", "x27": "0.8406110000000001", "x28": "14.441707000000001", "x29": "-0.120849", "x30": "5.015867", "x31": "america", "x32": "0.821254", "x33": "2.55354495", "x34": "-1.84863863", "x35": "1.6950307", "x36": "1.51292076", "x37": "3.51865516", "x38": "-1.5228092", "x39": "-2.2853103", "x40": "-1576.44", "x41": "-1109.88", "x42": "-158.62", "x43": "-1828.94", "x44": "0.49520292", "x45": "-2.20971925", "x46": "-0.690305716163116", "x47": "-1.2241275979842796", "x48": "-1.222886090120595", "x49": "-1.818977943938288", "x50": "0.020347397416074088", "x51": "2.3119441850454394", "x52": "-0.07435673356064304", "x53": "-0.0576265", "x54": "0.1030348", "x55": "0.59564248", "x56": "1.626547456", "x57": "-1.0763060909840458", "x58": "0.5913203500726121", "x59": "-1.0877765187234452", "x60": "1.27014337340356", "x61": "0.6933246356337982", "x62": "0.7255990172130561", "x63": "6.25%", "x64": "39.62417626", "x65": "-0.34046576", "x66": "0.81113762", "x67": "14.36705547", "x68": "-19.82612589", "x69": "0.33424312", "x70": "0.21591107", "x71": "-4.88384906", "x72": "0.76257143", "x73": "3.63539031", "x74": "-81.42302571", "x75": "0.01061658", "x76": "0.08064429", "x77": "0.2150197", "x78": "14.84293049", "x79": "-2.10231995", "x80": "6.35264328", "x81": "November", "x82": "Male", "x83": "0.7997773236062501", "x84": "-0.1304857222272298", "x85": "-0.212689557461508", "x86": "-0.284131119606305", "x87": "-0.4552068721927552", "x88": "-0.6754269968594849", "x89": "-0.10510873880386888", "x90": "0.5211188486643189", "x91": "0.148424", "x92": "0.92530093", "x93": "3.83042567", "x94": "-101.1057483", "x95": "0.05577509", "x96": "0.56488992", "x97": "0.05171552", "x98": "-32.5406118", "x99": "-266.72579479"}, {"x0": "2.0293669999999997", "x1": "-3.239301", "x2": "4.724436418197158", "x3": "2.2118311075461166", "x4": "0.551611146361754", "x5": "tuesday", "x6": "0.49240500000000004", "x7": "87.17904200000001", "x8": "4.333755", "x9": "0.513789", "x10": "14.317604000000001", "x11": "-3.31471", "x12": "$5,515.72", "x13": "0.295417", "x14": "12.520591", "x15": "4.0877", "x16": "0.918884", "x17": "14.743044", "x18": "-20.548698", "x19": "0.48135100000000003", "x20": "0.17962899999999998", "x21": "0.438461", "x22": "0.491454", "x23": "3.1969849999999997", "x24": "-97.28246899999999", "x25": "1.192911", "x26": "4.2800970000000005", "x27": "0.30186999999999997", "x28": "nan", "x29": "-1.899614", "x30": "nan", "x31": "germany", "x32": "0.48734341", "x33": "2.82584466", "x34": "-2.06608076", "x35": "0.04402067", "x36": "-0.49498194", "x37": "3.59107998", "x38": "-1.86201173", "x39": "-0.64685302", "x40": "-232.37", "x41": "527.08", "x42": "-9.46", "x43": "582.15", "x44": "0.9764149", "x45": "-0.10400614", "x46": "0.20532893791223", "x47": "0.6360683088773246", "x48": "0.9560161368002782", "x49": "-0.16721893898638476", "x50": "0.4640296781901955", "x51": "2.3743949815714602", "x52": "0.6381296568457049", "x53": "0.41124767", "x54": "-0.97818721", "x55": "0.77879075", "x56": "-0.7632954603999998", "x57": "-0.4566081303165422", "x58": "0.5503756467463191", "x59": "-0.13253421720719075", "x60": "0.04338607559659168", "x61": "0.8808301812718534", "x62": "1.2922155590008249", "x63": "60.38%", "x64": "12.77168333", "x65": "-1.74509859", "x66": "0.90191424", "x67": "14.37913333", "x68": "-18.91037928", "x69": "0.80395677", "x70": "0.08923535", "x71": "3.98044166", "x72": "0.08806195", "x73": "3.82664117", "x74": "-98.52120473", "x75": "0.93689644", "x76": "0.07905681", "x77": "0.02858207", "x78": "nan", "x79": "0.01852967", "x80": "5.00093131", "x81": "July", "x82": "Female", "x83": "0.2377332918442134", "x84": "-0.0323918657232083", "x85": "-1.1758573271462776", "x86": "-1.3652342194057443", "x87": "-1.1263427465053837", "x88": "-1.1527352561391448", "x89": "0.5137473000021247", "x90": "0.15449155166013726", "x91": "-0.034504", "x92": "0.90404228", "x93": "3.64296778", "x94": "-107.47648740000001", "x95": "1.04671797", "x96": "1.49412263", "x97": "0.23108405", "x98": "-32.74095405", "x99": "-4.3278872999999995"}]),
            content_type='application/json'
        )

        data = response.get_data(as_text=True)
        print("Batch Call: "+str(data))
        self.assertEqual(response.status_code, 200)
        self.assertIsNotNone(data)

    def test_predict_missing(self):
        response = tester.post(
            '/predict',
            data=json.dumps([{"x0": "0.042317", "x1": "-3.3447210000000003", "x2": "4.635124212161472", "x3": "-0.5983959993003629", "x4": "-0.6477715045570444", "x5": "monday", "x6": "0.184902", "x7": "46.690015", "x8": "3.034132", "x9": "0.364704", "x10": "14.260732999999998", "x11": "-1.559332", "x12": "$5,547.78", "x13": "0.520324", "x14": "31.212255", "x15": "4.891671", "x16": "0.357763", "x17": "14.766366", "x18": "-17.467243", "x19": "0.22462800000000002", "x20": "0.096752", "x21": "1.305564", "x22": "0.353632", "x23": "3.9090279999999997", "x24": "-91.273052", "x25": "1.396952", "x26": "4.401593", "x27": "0.443086",  "x81": "October", "x82": "Female", "x83": "-0.7116680715420765", "x84": "-0.26535598920105635", "x85": "0.5175495906776872", "x86": "-1.0881027091519957", "x87": "-1.8188638198005096", "x88": "-1.3584469526619427", "x89": "-0.6549951949654567", "x90": "-0.493304226235515", "x91": "0.37385300000000005", "x92": "0.94143481", "x93": "3.54679834", "x94": "-99.85748819999999", "x95": "0.403926", "x96": "1.65378726", "x97": "0.00771459", "x98": "-32.02164582", "x99": "-60.3127828"}]),
            content_type='application/json'
        )

        data = response.get_data(as_text=True)
        print("Missing variable test: "+str(data))
        self.assertEqual(response.status_code, 200)
        self.assertIsNotNone(data)


if __name__ == '__main__':
    unittest.main()
